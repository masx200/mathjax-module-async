{"version":3,"file":"index.cjs","sources":["../lib/cachepromise.ts","../lib/polyfill.js","../lib/importscripts.js","../lib/fetchsource.ts","../lib/preloaded.ts","../lib/preloadscript.ts","../lib/version.ts","../lib/mathjaxurl.ts","../lib/config.ts","../lib/configscript.ts","../lib/scriptstoload.ts","../lib/loadmodules.ts","../lib/loadmathjax.ts","../lib/initmathjax.ts","../lib/renderasciimath.ts","../lib/rendermathml.ts","../lib/renderlatex.ts"],"sourcesContent":["export function cachepromise<T extends (arg: any, ...rgs: any) => Promise<any>>(\n    fn: T\n): T {\n    const sourcecache = new Map();\n    return (async (key: any, ...rgs: any) => {\n        if (sourcecache.get(key)) {\n            return sourcecache.get(key);\n        }\n        const loadpro = fn(key, ...rgs);\n        sourcecache.set(key, loadpro);\n        return loadpro;\n    }) as T;\n}\n","import importScripts from \"./importscripts\";\n// import \"regenerator-runtime/runtime\";\nif (\"undefined\" === typeof regeneratorRuntime) {\n    importScripts(\n        \"https://cdn.jsdelivr.net/npm/regenerator-runtime@0.13.9/runtime.min.js\"\n    );\n}\n","function importScripts(url) {\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", url, false);\n    xhr.send(null);\n    var data = xhr.responseText;\n    new Function(data)();\n}\nmodule.exports = importScripts;\n","import { cachepromise } from \"./cachepromise\";\n\nexport const fetchsource = cachepromise(async function (\n    url: string,\n    opts: any = {}\n) {\n    return fetch(url, opts)\n        .then((r) =>\n            r.ok ? r : Promise.reject(new Error(\"fetch failed:\" + url))\n        )\n        .then((r) => r.text());\n});\n","//1470.11kb\nexport const preloaded = [\n    \"startup\",\n    \"[tex]/action\",\n    \"[tex]/all-packages\",\n    \"[tex]/ams\",\n    \"[tex]/amscd\",\n    \"[tex]/bbox\",\n    \"[tex]/boldsymbol\",\n    \"[tex]/braket\",\n    \"[tex]/bussproofs\",\n    \"[tex]/cancel\",\n    \"[tex]/cases\",\n    \"[tex]/centernot\",\n    \"[tex]/color\",\n    \"[tex]/colortbl\",\n    \"[tex]/colorv2\",\n    \"[tex]/configmacros\",\n    \"[tex]/empheq\",\n    \"[tex]/enclose\",\n    \"[tex]/extpfeil\",\n    \"[tex]/gensymb\",\n    \"[tex]/html\",\n    \"[tex]/mathtools\",\n    \"[tex]/mhchem\",\n    \"[tex]/newcommand\",\n    \"[tex]/noerrors\",\n    \"[tex]/noundefined\",\n    \"[tex]/physics\",\n    \"[tex]/require\",\n    \"[tex]/setoptions\",\n    \"[tex]/tagformat\",\n    \"[tex]/textcomp\",\n    \"[tex]/textmacros\",\n    \"[tex]/unicode\",\n    \"[tex]/upgreek\",\n    \"[tex]/verb\",\n    \"core\",\n    \"input/asciimath\",\n    \"input/mml\",\n    \"input/tex-base\",\n    \"input/tex-full\",\n    \"loader\",\n    \"output/chtml\",\n    \"output/chtml/fonts/tex\",\n];\n","import { preloaded } from \"./preloaded\";\n\nexport const preloadscript = URL.createObjectURL(\n    new Blob([getmathjaxafter()], { type: \"application/javascript\" })\n);\nfunction getmathjaxafter() {\n    return `\nMathJax.loader.preLoad(${preloaded.map((a) => JSON.stringify(a)).join(\",\")})\n    `;\n}\n// console.log(getmathjaxafter());\n","export const version = \"3.2.0\";\n","import { version } from \"./version.js\";\n\nexport const mathjaxbase = `https://cdn.jsdelivr.net/npm/mathjax@${version}/es5`;\n","import { mathjaxbase } from \"./mathjaxurl.js\";\nconst config = {\n    startup: { typeset: false },\n    loader: {\n        load: [\n            // \"input/asciimath\",\n            // \"output/chtml\",\n            // \"input/tex-full\",\n            // \"input/mml\",\n        ],\n        paths: {\n            mathjax: mathjaxbase,\n        },\n    },\n};\nexport { config };\n","import { config } from \"./config\";\n\nexport const configscript = URL.createObjectURL(\n    new Blob([getmathjaxafter()], { type: \"application/javascript\" })\n);\nfunction getmathjaxafter() {\n    return `\nwindow.MathJax=${JSON.stringify(config)}\n    `;\n}\n","import { preloadscript } from \"./preloadscript\";\nimport { configscript } from \"./configscript\";\nimport { mathjaxbase } from \"./mathjaxurl\";\n\n// export const mathjaxurl = mathjaxbase + \"/\" + `tex-mml-chtml.min.js`;\n//2281.69kb\nconst mathjaxmodules = [\n    \"core\",\n    \"input/asciimath\",\n    \"output/chtml\",\n    \"input/tex-full\",\n    \"input/mml\",\n    \"output/chtml/fonts/tex\",\n];\nconst mathjaxurls = mathjaxmodules.map(getrealmoduleurl);\nexport const scriptstoload = [\n    configscript,\n\n    getrealmoduleurl(\"startup\"),\n    preloadscript,\n    ...mathjaxurls,\n];\n\nfunction getrealmoduleurl(value: string): string {\n    return mathjaxbase + \"/\" + value + \".min.js\";\n}\n// console.log(scriptstoload);\n","import { fetchsource } from \"./fetchsource\";\nimport { scriptstoload } from \"./scriptstoload\";\n\nexport async function loadmodules(): Promise<Record<string, any>> {\n    const scriptscontent = await Promise.all(\n        scriptstoload.map((u) => fetchsource(u))\n    );\n    // console.log(scriptscontent);\n\n    const scriptbody = scriptscontent.join(\"\\n;\\n\");\n    // console.log(scriptbody);\n\n    let MathJax: Record<string, any> = {};\n\n    const global = new Proxy(\n        {\n            get MathJax() {\n                return MathJax;\n            },\n            set MathJax(value) {\n                MathJax = value;\n            },\n        },\n        {\n            get(t, p, r) {\n                const value =\n                    Reflect.get(t, p, r) || Reflect.get(window, p, window);\n                if (typeof value === \"function\") {\n                    return value.bind(window);\n                } else {\n                    return value;\n                }\n            },\n\n            has(t, p) {\n                return Reflect.has(t, p) || Reflect.has(window, p);\n            },\n            ownKeys(t) {\n                return Reflect.ownKeys(t) || Reflect.ownKeys(window);\n            },\n        }\n    );\n\n    const proxymathjax = new Proxy(\n        {},\n        {\n            get(t, p, r) {\n                return Reflect.get(MathJax, p, MathJax);\n            },\n            set(t, p, v, r) {\n                return Reflect.set(MathJax, p, v, MathJax);\n            },\n            has(t, p) {\n                return Reflect.has(MathJax, p);\n            },\n            ownKeys(t) {\n                return Reflect.ownKeys(MathJax);\n            },\n            defineProperty(t, p, a) {\n                return Reflect.defineProperty(MathJax, p, a);\n            },\n\n            deleteProperty(t, p) {\n                return Reflect.deleteProperty(MathJax, p);\n            },\n        }\n    );\n    const likewindow = Object.fromEntries(\n        Reflect.ownKeys(window)\n            .filter((k) => Object.is(window, Reflect.get(window, k)))\n            .map((k) => [k, global])\n    );\n    // three global variables are accidentally defined\n    //https://github.com/mathjax/MathJax/issues/2748\n    const accidentallyvariables = {\n        value: undefined,\n        mathfontfamily: undefined,\n        mathfontsize: undefined,\n    };\n    const scope = Object.assign(\n        accidentallyvariables,\n        { MathJax: proxymathjax },\n        likewindow\n    );\n    const argskey = Object.keys(scope);\n    const argsvalue = Object.values(scope);\n    const fun = new Function(...argskey, scriptbody);\n    Reflect.apply(fun, global, argsvalue);\n    // console.info.call(console, global);\n    return MathJax;\n}\n","// import { config } from \"./config.js\";\n//import { loadsheet } from \"./loadsheet.js\";\n//import { mathjaxcss } from \"./mathjaxcss.js\";\n// function setmathjaxconfig() {\n//     if (window.MathJax) {\n//         return;\n//     }\n//     window.MathJax = config;\n// }\nimport { cachepromise } from \"./cachepromise\";\nimport { loadmodules } from \"./loadmodules\";\nexport const loadmathjax = cachepromise(async function () {\n    //  await loadsheet(mathjaxcss);\n    return loadmodules();\n});\n","import { loadmathjax } from \"./loadmathjax.js\";\n\nexport async function initmathjax() {\n    const MathJax = await loadmathjax();\n    await MathJax.startup.promise;\n    return MathJax;\n}\n","import { initmathjax } from \"./initmathjax.js\";\n/**\n *\n * @param {string} input\n * @param {HTMLElement} container\n * @returns {Promise<void>}\n */\nexport async function renderasciimath(\n    input: string,\n    container: HTMLElement\n): Promise<void> {\n    const MathJax = await initmathjax();\n    const options = MathJax.getMetricsFor(container);\n    // console.log(JSON.stringify( options));\n    const node = await MathJax.asciimath2chtmlPromise(input, options);\n\n    container.appendChild(node);\n    MathJax.startup.document.clear();\n    MathJax.startup.document.updateDocument();\n}\n","import { initmathjax } from \"./initmathjax.js\";\n/**\n *\n * @param {string} input\n * @param {HTMLElement} container\n * @returns {Promise<void>}\n */\nexport async function rendermathml(\n    input: string,\n    container: HTMLElement\n): Promise<void> {\n    const MathJax = await initmathjax();\n    const options = MathJax.getMetricsFor(container);\n    // console.log(JSON.stringify( options));\n    const node = await MathJax.mathml2chtmlPromise(input, options);\n\n    container.appendChild(node);\n    MathJax.startup.document.clear();\n    MathJax.startup.document.updateDocument();\n}\n","import { initmathjax } from \"./initmathjax.js\";\n/**\n *\n * @param {string} input\n * @param {HTMLElement} container\n * @returns {Promise<void>}\n */\nexport async function renderlatex(\n    input: string,\n    container: HTMLElement\n): Promise<void> {\n    const MathJax = await initmathjax();\n    const options = MathJax.getMetricsFor(container);\n    // console.log(JSON.stringify( options));\n    const node = await MathJax.tex2chtmlPromise(input, options);\n\n    container.appendChild(node);\n    MathJax.startup.document.clear();\n    MathJax.startup.document.updateDocument();\n}\n"],"names":["cachepromise","fn","sourcecache","Map","key","get","rgs","loadpro","set","regeneratorRuntime","url","xhr","XMLHttpRequest","open","send","data","responseText","Function","importScripts","fetchsource","opts","fetch","then","r","ok","Promise","reject","Error","text","preloaded","preloadscript","URL","createObjectURL","Blob","map","a","JSON","stringify","join","type","mathjaxbase","config","startup","typeset","loader","load","paths","mathjax","configscript","mathjaxurls","getrealmoduleurl","scriptstoload","value","loadmodules","all","u","scriptscontent","scriptbody","MathJax","Proxy","t","p","Reflect","window","bind","has","ownKeys","global","proxymathjax","v","defineProperty","deleteProperty","likewindow","Object","fromEntries","filter","k","is","accidentallyvariables","undefined","mathfontfamily","mathfontsize","scope","assign","argskey","keys","argsvalue","values","fun","apply","loadmathjax","initmathjax","promise","input","container","options","getMetricsFor","asciimath2chtmlPromise","node","appendChild","document","clear","updateDocument","mathml2chtmlPromise","tex2chtmlPromise"],"mappings":"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"}